int n = int.Parse(Console.ReadLine());

            int[,] matrix = new int[n, n];
            for (int i = 0; i < n; i++)
            {
                string[] input = Console.ReadLine().Split(" ");

                for (int j = 0; j < n; j++)
                {
                    matrix[i, j] = int.Parse(input[j]);
                }
            }

            int sumPrDiagonal = 0;
            int sumSecDiagonal = 0;


            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (i==j)
                    {
                        sumPrDiagonal += matrix[i, j];
                    }
 
                }
               
            }
            for (int i = 0; i < matrix.GetLength(1); i++)
            {
                for (int j = 0; j < matrix.GetLength(0); j++)
                {
                    if ((i+j)==(n-1))
                    {
                        sumSecDiagonal += matrix[i, j];
                    }

                }


            }

            int bigger = Math.Max(sumPrDiagonal, sumSecDiagonal);
            int smaller = Math.Min(sumPrDiagonal, sumSecDiagonal);

            Console.WriteLine(bigger-smaller);

---

//read rows and cols

            int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();

            int rows = input[0];
            int cols = input[1];

            char[,] matrix = new char[rows, cols];

            for (int i = 0; i < rows; i++)
            {
                string[] text = Console.ReadLine().Split(" ");

                for (int j = 0; j < cols; j++)
                {
                    matrix[i, j] = char.Parse(text[j]);
                }
            }

            int countOfSquares = 0;

            for (int i = 0; i < rows-1; i++)
            {
                for (int j = 0; j < cols-1; j++)
                {
                    if ((matrix[i,j]==matrix[i,j+1])&&(matrix[i,j]==matrix[i+1,j])&&(matrix[i,j]==matrix[i+1,j+1]))
                    {
                        countOfSquares++;
                    }
                }
            }
            Console.WriteLine(countOfSquares);

---

int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();

            int rows = input[0];
            int cols = input[1];

            int[,] matrix = new int[rows, cols];

            for (int i = 0; i < rows; i++)
            {
                int[] numbers = Console.ReadLine().Split(" ",StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

                for (int j = 0; j < cols; j++)
                {
                    matrix[i,j]= numbers[j];
                }
            }

            int sum = 0;

            int currentRow = 0;
            int currentCol = 0;

            for (int i = 0; i < matrix.GetLength(0)-2; i++)
            {
                for (int j = 0; j < matrix.GetLength(1)-2; j++)
                {
                    int currentSum =0;                  

                    for (int k = i; k < i+3; k++)
                    {
                        for (int r = j; r < j+3; r++)
                        {
                            currentSum += matrix[k, r];
                        }
                    }
                    if (currentSum > sum)
                    {
                        sum = currentSum;
                        currentRow = i;
                        currentCol = j;
                       
                    }

                }
            }

            Console.WriteLine($"Sum = {sum}");
           

            for (int i = currentRow; i < currentRow+3; i++)
            {
                for (int j = currentCol; j < currentCol+3; j++)
                {
                    Console.Write(matrix[i,j]+" ");
                }
                Console.WriteLine();
            }

---

int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();

            int rows = input[0];
            int cols = input[1];

            string[,] matrix = new string[rows, cols];

            for (int i = 0; i < rows; i++)
            {
                string[] inputNumbers = Console.ReadLine().Split(" ");
                for (int j = 0; j < cols; j++)
                {
                    matrix[i, j] = inputNumbers[j];
                }
            }

            string command = Console.ReadLine();
            while (command!="END")
            {

                string[] splited = command.Split(" ");

                string firstCommand = splited[0];

                if (firstCommand=="swap"&&splited.Length==5)
                {
                    int row1 = int.Parse(splited[1]);
                    int col1 = int.Parse(splited[2]);
                    int row2 = int.Parse(splited[3]);
                    int col2 = int.Parse(splited[4]);
                    if (rows-1>=row1&&row1>=0&&rows-1>=row2&&row2>=0&&cols-1>=col1&&col1>=0&&cols-1>=col2&&col2>=0)
                    {
                        var temp = matrix[row1, col1];
                        matrix[row1, col1] = matrix[row2, col2];
                        matrix[row2, col2] = temp;

                        for (int i = 0; i < rows; i++)
                        {
                            for (int j = 0; j < cols; j++)
                            {
                                Console.Write($"{matrix[i,j]} ");
                            }
                            Console.WriteLine();
                        }
                       
                    }
                    else
                    {
                        Console.WriteLine("Invalid input!");
                    }

                }
                else
                {
                    Console.WriteLine("Invalid input!");
                }

                command = Console.ReadLine();
            }

---
int[] size = ReadLine();
            string[,] matrix = new string[size[0], size[1]];
            for (int i = 0; i < size[0]; i++)
            {
                if (i % 2 == 0)
                {
                    for (int j = 0; j < size[1]; j++)
                    {
                        matrix[i, j] += GetNextChar();
                    }
                }
                else
                {
                    for (int j = size[1] - 1; j >= 0; j--)
                    {
                        matrix[i, j] += GetNextChar();
                    }
                }
            }
            for (int i = 0; i < size[0]; i++)
            {
                for (int j = 0; j < size[1]; j++)
                {
                    Console.Write(matrix[i, j]);
                }
                Console.WriteLine();
            }
        }
        static int counter = 0;
        static string inputWord = Console.ReadLine();
        private static char GetNextChar()
        {
            char nextChar = inputWord[counter];
            counter++;
            if (counter >= inputWord.Length)
            {
                counter = 0;
            }
            return nextChar;
        }
        static int[] ReadLine()
        {
            return Console.ReadLine()
                .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .ToArray();

---

int n = int.Parse(Console.ReadLine());
            int[][] array = new int[n][];

            for (int i = 0; i < n; i++)
            {
                int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();
                array[i] = new int[input.Length];

                for (int j = 0; j < input.Length; j++)
                {
                    array[i][j] = input[j];
                }

            }

            for (int i = 0; i < n-1; i++)
            {
                if (array[i].Length==array[i+1].Length)
                {
                    for (int j = 0; j < array[i].Length; j++)
                    {
                        array[i][j] *= 2;
                        array[i+1][j] *=2;
                    }

                }
                else if (array[i].Length != array[i + 1].Length)
                {
                    for (int j = 0; j < array[i].Length; j++)
                    {
                        array[i][j] /= 2;
                        
                    }
                    for (int k = 0; k < array[i+1].Length; k++)
                    {
                        array[i + 1][k] /= 2;
                    }
                }
                

            }

            string command = Console.ReadLine();
            while (command!="End")
            {
                string[] splited = command.Split(" ");
                switch (splited[0])
                {
                    case "Add":
                        int row = int.Parse(splited[1]);
                        int col = int.Parse(splited[2]);
                        int value = int.Parse(splited[3]);
                        if (n>row&&row>=0)
                        {
                            if (array[row].Length>col&&col>=0)
                            {
                                array[row][col] += value;
                            }
                        }

                        break;
                    case "Subtract":
                        int currentrow = int.Parse(splited[1]);
                        int currentcol = int.Parse(splited[2]);
                        int currentvalue = int.Parse(splited[3]);
                        if (n > currentrow && currentrow >= 0)
                        {
                            if (array[currentrow].Length > currentcol && currentcol >= 0)
                            {
                                array[currentrow][currentcol] -= currentvalue;
                            }
                        }

                        break;
                }

                command = Console.ReadLine();
            }
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine(String.Join(" ",array[i]));
            }

---

 Queue<Tuple<int, int>> kniteMoves = new Queue<Tuple<int, int>>();
            kniteMoves.Enqueue(new Tuple<int, int>(-1, -2));
            kniteMoves.Enqueue(new Tuple<int, int>(+1, -2));
            kniteMoves.Enqueue(new Tuple<int, int>(-2, -1));
            kniteMoves.Enqueue(new Tuple<int, int>(+2, -1));
            kniteMoves.Enqueue(new Tuple<int, int>(-2, +1));
            kniteMoves.Enqueue(new Tuple<int, int>(+2, +1));
            kniteMoves.Enqueue(new Tuple<int, int>(-1, +2));
            kniteMoves.Enqueue(new Tuple<int, int>(+1, +2));

            int boardSize = int.Parse(Console.ReadLine());

            string[,] board = new string[boardSize, boardSize];
            for (int i = 0; i < boardSize; i++)
            {
                char[] curRow = Console.ReadLine().ToCharArray();
                for (int k = 0; k < boardSize; k++)
                {
                    board[i, k] = curRow[k].ToString();
                }

            }

            bool foundHit = true;
            int mostHits = 0;
            int saveMostHits = 0;
            int bestRow = int.MinValue;
            int bestCol = int.MinValue;
            int removedResult = 0;
            while (foundHit == true)
            {

                for (int i = 0; i < board.GetLength(0); i++)
                {
                    for (int k = 0; k < board.GetLength(1); k++)
                    {
                        if (board[i, k] == "K")
                        {
                            for (int j = 1; j <= kniteMoves.Count; j++)
                            {
                                int row = kniteMoves.Peek().Item1;
                                int col = kniteMoves.Peek().Item2;

                                kniteMoves.Enqueue(kniteMoves.Dequeue());
                                try
                                {
                                    if (board[i + row, k + col] == "K")
                                    {
                                        mostHits++;
                                    }

                                }
                                catch (Exception)
                                {

                                    continue;
                                }
                            }

                        }
                        if (mostHits > 0)
                        {
                            foundHit = true;
                        }
                        else
                        {
                            foundHit = false;
                        }
                        if (mostHits > saveMostHits)
                        {
                            bestRow = i;
                            bestCol = k;
                            saveMostHits = mostHits;
                        }
                        mostHits = 0;
                    }
                }

                if (foundHit = true && bestRow != int.MinValue && bestCol != int.MinValue)
                {
                    board[bestRow, bestCol] = "0";
                    removedResult++;
                }
                saveMostHits = 0;
                bestRow = int.MinValue;
                bestCol = int.MinValue;
            }
            Console.WriteLine(removedResult);
