static void Main(string[] args)
        {

            string names = Console.ReadLine();
            Action<string> action = PrintNames;
            action(names);
            
         
        }
        static void PrintNames(string input)
        {
            string[] names = input.Split(" ");
            foreach (string name in names)
            {
                Console.WriteLine(name);
            }
        }

---

static void Main(string[] args)
        {

            string names = Console.ReadLine();
            Action<string> action = PrintNames;
            action(names);
            
         
        }
        static void PrintNames(string input)
        {
            string[] names = input.Split(" ");
            foreach (string name in names)
            {
                Console.WriteLine("Sir "+name);
            }
        }

---

 static void Main(string[] args)
        {

            List<int> list = Console.ReadLine().Split(" ").Select(int.Parse).ToList();

            Func<List<int>, int> func = Min;
            int smallest = func(list);
            Console.WriteLine(smallest);
        }
        static int Min(List<int> list)
        {
            list.Sort();
            return list[0];
        }

---

Predicate<int> predicate;
            string[] input = Console.ReadLine().Split(" ");

            int first = int.Parse(input[0]);
            int second = int.Parse(input[1]);

            string command = Console.ReadLine();
            switch (command)
            {
                case "odd":
                    predicate = p => p % 2 != 0;
                    for (int i = first; i <= second; i++)
                    {
                        if (predicate(i))
                        {
                            Console.Write(i+" ");
                        }
                       
                    }
                    break;
                case "even":
                    predicate = p => p % 2 == 0;
                    for (int i = first; i <= second; i++)
                    {
                        if (predicate(i))
                        {
                            Console.Write(i + " ");
                        }
                    }
                    break;
            }

---

List<int> list = Console.ReadLine().Split(" ").Select(int.Parse).ToList();
            string command = Console.ReadLine();
            Func<int, int> func;
            while (command!="end")
            {
                if (command=="add")
                {
                    func = x => x + 1;
                    list = list.Select(func).ToList();

                }
                else if(command=="multiply")
                {
                    func = x => x * 2;
                    list = list.Select(func).ToList();

                }
                else if (command=="subtract")
                {
                    func = x => x - 1;
                    list = list.Select(func).ToList();
                }
                else if (command=="print")
                {
                    Console.WriteLine(String.Join(" ",list));
                }


                command = Console.ReadLine();
            }

---

static void Main(string[] args)
        {

            List<int> list = Console.ReadLine().Split(" ").Select(int.Parse).ToList();
            int number = int.Parse(Console.ReadLine());
            Func<int,bool> func = p => p % number != 0;
            Action<List<int>> action = PrintReversed;

            
            action(list.Where(func).ToList());
            
        }
        static void PrintReversed(List<int> list)
        {
            for (int i = list.Count-1; i >= 0; i--)
            {
                Console.Write(list[i]+" ");
            }
        }

---

 int n = int.Parse(Console.ReadLine());
            List<string> names = Console.ReadLine().Split(' ').ToList();
            Func<string, bool> func = p => p.Length <= n;
            foreach (string  name in names.Where(func))
            {
                Console.WriteLine(name);
            }

---

 int n = int.Parse(Console.ReadLine());
            int[] numbers = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();
            List<int> nums = new List<int>();

            for (int i = 1; i <= n; i++)
            {
                bool isDivided = true;
                int currentNum = i;
           
                foreach (int num in numbers)
                {
                    Func<int, int, bool> func = (p, n) => p % n != 0;
                    if (func(currentNum,num))
                    {
                        isDivided = false;
                        break;
                    }               
                }
                if (isDivided)
                {
                    nums.Add(currentNum);
                }
            }
            Console.WriteLine(String.Join(" ",nums));

---

 static void Main(string[] args)
        {
            List<string> list = Console.ReadLine().Split().ToList();

            string command = Console.ReadLine();

            while (command != "Party!")
            {
                string[] splited = command.Split(" ");
                Predicate<string> predicate = GetPredicate(splited[1],splited[2]);
                if (splited[0]=="Remove")
                {
                    list.RemoveAll(predicate);

                }
                else if (splited[0]=="Double")
                {
                    List<string> doubled = list.FindAll(predicate);
                    if (doubled.Count > 0)
                    {
                        int index = list.FindIndex(predicate);
                        list.InsertRange(index, doubled);
                    }
                }
                


                command = Console.ReadLine();
            }
            if (list.Count>0)
            {
                Console.WriteLine(String.Join(", ",list)+" are going to the party!");
            }
            else
            {
                Console.WriteLine("Nobody is going to the party!");
            }

        }

        private static Predicate<string> GetPredicate(string v ,string param)
        {
            if (v=="StartsWith")
            {
                return x => x.StartsWith(param);
            }
            if(v=="EndsWith")
            {
                return x => x.EndsWith(param);

            }
            int length = int.Parse(param);
            return x => x.Length == length;
        }

---

 List<string> guests = new List<string>(Console.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));
            List<string> filters = new List<string>();

            string input = Console.ReadLine();

            while (input != "Print")
            {

                string [] commands = input.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

                if (commands[0] == "Add filter")
                {
                    filters.Add(commands[1] + " " + commands[2]);
                }
                else if (commands[0] == "Remove filter")
                {
                    filters.Remove(commands[1] + " " + commands[2]);
                }

                input = Console.ReadLine();
            }

            foreach (var filter in filters)
            {
                string[] commands = filter.Split(' ');

                if (commands[0] == "Starts")
                {
                    guests = guests.Where(p => !p.StartsWith(commands[2])).ToList();
                }
                else if (commands[0] == "Ends")
                {
                    guests = guests.Where(p => !p.EndsWith(commands[2])).ToList();
                }
                else if (commands[0] == "Length")
                {
                    guests = guests.Where(p => p.Length != int.Parse(commands[1])).ToList();
                }
                else if (commands[0] == "Contains")
                {
                    guests = guests.Where(p => !p.Contains(commands[1])).ToList();
                }
            }

            if (guests.Any())
            {
                Console.WriteLine(string.Join(" ", guests));
            }

---

 int n = int.Parse(Console.ReadLine());
            string[] names = Console.ReadLine().Split(' ');
            bool isWinnerName = false;
            string winnerName = "";
            Func<int, int, bool> func = (p, n) => p >= n;

            foreach (string name in names)
            {
                if (isWinnerName)
                {
                    break;
                }
                int currentSum = 0;
                for (int i = 0; i < name.Length; i++)
                {
                    currentSum += name[i];
                }
                if (func(currentSum,n))
                {
                    winnerName = name;
                    isWinnerName = true;
                }
            }
            Console.WriteLine(winnerName);