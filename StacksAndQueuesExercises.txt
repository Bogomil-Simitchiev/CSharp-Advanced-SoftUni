int[] array = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();
            Stack<int> stack = new Stack<int>();
            int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();

            int N = array[0];
            int S = array[1];
            int X = array[2];
            for (int i = 0; i < N; i++)
            {
                stack.Push(input[i]);
            }

            for (int i = 0; i < S; i++)
            {
                stack.Pop();
            }

            if (stack.Contains(X))
            {
                Console.WriteLine("true");
            }
            else if(stack.Count==0)
            {
                Console.WriteLine("0");
            }
            else
            {
                Console.WriteLine(stack.Min());
            }

---

int[] array = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();
            Queue<int> queue = new Queue<int>();
            int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();

            int N = array[0];
            int S = array[1];
            int X = array[2];
            for (int i = 0; i < N; i++)
            {
                queue.Enqueue(input[i]);
            }

            for (int i = 0; i < S; i++)
            {
                queue.Dequeue();
            }

            if (queue.Contains(X))
            {
                Console.WriteLine("true");
            }
            else if(queue.Count==0)
            {
                Console.WriteLine("0");
            }
            else
            {
                Console.WriteLine(queue.Min());
            }

---

int n = int.Parse(Console.ReadLine());
            Stack<int> stack = new Stack<int>();
            for (int i = 0; i < n; i++)
            {
                string[] input = Console.ReadLine().Split();
                if (input[0]=="1")
                {
                    stack.Push(int.Parse(input[1]));
                }
                else if (input[0] == "2")
                {
                    if (stack.Count>0)
                    {
                        stack.Pop();

                    }
                  
                }
                else if (input[0] == "3")
                {
                    if (stack.Count>0)
                    {
                        Console.WriteLine(stack.Max());
                    }
                }
                else if (input[0]=="4")
                {
                    if (stack.Count>0)
                    {

                        Console.WriteLine(stack.Min());
                    }
                }

            }
            while (stack.Count>1)
            {
                Console.Write($"{stack.Pop()}, ");
            }
            Console.Write(stack.Pop());

---

int quantityOfFood = int.Parse(Console.ReadLine());
            List<int> orders = Console.ReadLine().Split().Select(int.Parse).ToList();
            Queue<int> queue = new Queue<int>();

            foreach (int order in orders)
            {
                queue.Enqueue(order);
            }
            int maxQuantityOrder = queue.Max();

            int countOfQueue = queue.Count;
            for (int i = 0; i < countOfQueue; i++)
            {
                if (orders[i]>quantityOfFood)
                {
                    break;
                }
                else
                {
                    quantityOfFood -= orders[i];
                    queue.Dequeue();
                }
            }

            Console.WriteLine(maxQuantityOrder);
            if (queue.Count > 0)
            {
                Console.Write($"Orders left:");
                foreach (int order in queue)
                {
                    Console.Write(" "+order);
                }
            }
            else
            {
                Console.WriteLine("Orders complete");
            }

---

int[] clothes = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
            Stack<int> stack = new Stack<int>(clothes);
            int capacity = int.Parse(Console.ReadLine());
            int sum = 0;
            int numberOfRacks = 1;

            while (stack.Count > 0)
            {
                sum += stack.Peek();
                if (sum <= capacity)
                {
                    stack.Pop();
                }
                else
                {
                    numberOfRacks++;
                    sum = 0;
                }

            }
            Console.WriteLine(numberOfRacks);

---

List<string> inputSongs = Console.ReadLine().Split(", ").ToList();
            Queue<string> songsQueue = new Queue<string>();

            foreach (string song in inputSongs)
            {
                songsQueue.Enqueue(song);
            }

            while (songsQueue.Count>0)
            {
                string command = Console.ReadLine();

                if (command == "Play")
                {
                    songsQueue.Dequeue();
                }
                else if (command.StartsWith("Add"))
                {
                    string songFullname = command.Substring(4);
                    if (songsQueue.Contains(songFullname))
                    {
                        Console.WriteLine($"{songFullname} is already contained! ");
                    }
                    else
                    {
                        songsQueue.Enqueue(songFullname);
                    }
                }
                else if (command == "Show")
                {
                    Console.WriteLine("{0}", string.Join(", ", songsQueue));
                }
            }

            Console.WriteLine("No more songs!");

---

decimal n = decimal.Parse(Console.ReadLine());

            decimal startPump = 0;
            decimal fuelLeft = 0;

            for (decimal i = 0; i < n; i++)
            {
                List<decimal> pair = Console.ReadLine()
                                            .Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                            .Select(decimal.Parse)
                                            .ToList();

                decimal gasPump = pair[0];
                decimal distanceToNext = pair[1];

                fuelLeft += gasPump;

                if (fuelLeft >= distanceToNext)
                {
                    fuelLeft -= distanceToNext;
                }
                else
                {
                    startPump = i + 1;
                    fuelLeft = 0;
                }

            }

            Console.WriteLine($"{startPump}");

---

 var input = Console.ReadLine(); //{[()]}

            Queue<char> queue = new Queue<char>(input);

            int counter = 0;
            bool check = true;

            if (queue.Count % 2 != 0)
            {
                Console.WriteLine("NO");
                return;
            }

            while (queue.Any())
            {
                var first = queue.Dequeue();
                var next = queue.Peek();

                if (first == '{')
                {
                    if (next == '}')
                    {
                        queue.Dequeue();
                        counter = 0;
                        continue;
                    }
                    else
                    {
                        queue.Enqueue(first);
                    }
                }
                else if (first == '(')
                {
                    if (next == ')')
                    {
                        queue.Dequeue();
                        counter = 0;
                        continue;
                    }
                    else
                    {
                        queue.Enqueue(first);
                    }
                }
                else if (first == '[')
                {
                    if (next == ']')
                    {
                        queue.Dequeue();
                        counter = 0;
                        continue;
                    }
                    else
                    {
                        queue.Enqueue(first);
                    }
                }
                else
                {
                    queue.Enqueue(first);
                }

                counter++;

                if (counter == queue.Count)
                {
                    check = false;
                    break;
                }
            }

            if (check)
            {
                Console.WriteLine("YES");
            }
            else
            {
                Console.WriteLine("NO");
            }

---

int n = int.Parse(Console.ReadLine());

            Stack<string> previousCommands = new Stack<string>();

            string text = string.Empty;

            for (int i = 0; i < n; i++)
            {
                string[] commands = Console.ReadLine()
                                .Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                switch (commands[0])
                {
                    case "1":
                        previousCommands.Push(text);
                        text += commands[1];
                        break;

                    case "2":
                        previousCommands.Push(text);
                        text = text.Substring(0, text.Length - int.Parse(commands[1]));
                        break;

                    case "3":
                        Console.WriteLine(text[int.Parse(commands[1]) - 1]);
                        break;

                    case "4":
                        text = previousCommands.Pop();
                        break;
                }
            }
